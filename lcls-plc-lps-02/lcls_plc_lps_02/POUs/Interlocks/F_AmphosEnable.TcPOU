<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="F_AmphosEnable" Id="{985578da-c888-4cd6-8fc2-8ee3835dc59d}" SpecialFunc="None">
    <Declaration><![CDATA[// Interlock logic for the Amphos relay
FUNCTION F_AmphosEnable : BOOL
VAR_INPUT
    fAmphosVoltage      : LREAL; // The Amphos voltage
    fOPCPAVoltage       : LREAL; //OPCPA Voltage
    AmphosStatus        : BOOL; //Amphos Laser Status
    Mode                : E_Mode;
    //ShutterStatus : BOOL; //Shutter State from Amphos

END_VAR
VAR_IN_OUT CONSTANT
    stAmphosSetpoints   : ST_LaserSetpoints; // The Amphos setpoints
    stErrors            : ST_ErrorStates; // Currently detected errors
    stOPCPASetpoints    : ST_LaserSetpoints; //OPCPA Setpoints
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[(* // Amphos Enable bit is needed to turn ON the Amphos Laser
As per logic table, the Amphos Enable is Disabled in OPCPA Protection, MPC Protection and MPC override
based on the Amphos PM voltage less than Minimum set user Voltage
*)

IF (stErrors.bHardwareFailure) // OR (NOT GVL_IO.bBaseplateChillerFlow) OR (NOT GVL_IO.bDumpChillerFlow) // Disable Amphos if there is a hardware failure
THEN
    F_AmphosEnable := FALSE;
ELSE
    IF ( MODE = E_Mode.OPCPA_Protection AND fAmphosVoltage < stAmphosSetpoints.nMinVoltage)  //Per LPS Interlock Logic thruth table
    OR
    (MODE = E_Mode.MPC_Protection AND fAmphosVoltage < stAmphosSetpoints.nMinVoltage) //AND AmphosStatus)
    OR
    (MODE = E_Mode.MPC_Override AND fAmphosVoltage < stAmphosSetpoints.nMinVoltage) //AND AmphosStatus)
    THEN
    F_AmphosEnable := FALSE;
    ELSE
    F_AmphosEnable := TRUE;
    END_IF
END_IF

]]></ST>
    </Implementation>
    <LineIds Name="F_AmphosEnable">
      <LineId Id="3" Count="20" />
      <LineId Id="2" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>
<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="F_AmphosEnable" Id="{985578da-c888-4cd6-8fc2-8ee3835dc59d}" SpecialFunc="None">
    <Declaration><![CDATA[// Interlock logic for the Amphos relay
FUNCTION F_AmphosEnable : BOOL
VAR_INPUT
    fAmphosVoltage : LREAL; // The Amphos voltage
    fOPCPAVoltage : LREAL; //OPCPA Voltage
    AmphosStatus : BOOL; //Amphos Laser Status
    Mode : E_Mode;
    //ShutterStatus : BOOL; //Shutter State from Amphos

END_VAR
VAR_IN_OUT CONSTANT
    stAmphosSetpoints : ST_LaserSetpoints; // The Amphos setpoints
    stErrors : ST_ErrorStates; // Currently detected errors
    stOPCPASetpoints : ST_LaserSetpoints; //OPCPA Setpoints
END_VAR
VAR
	bAmphosUnderVolt : BOOL; //Amphos voltage below setpoint minimum
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[(* // Amphos Enable bit is needed to turn ON the Amphos Laser
As per logic table, the Amphos Enable is Disabled in OPCPA Protection, MPC Protection and MPC override
based on the Amphos PM voltage less than Minimum set user Voltage
*)
// Disable Amphos if there is a hardware failure
IF (stErrors.bHardwareFailure) // OR (NOT GVL_IO.bBaseplateChillerFlow) OR (NOT GVL_IO.bDumpChillerFlow) 
THEN
    F_AmphosEnable := FALSE;
ELSE
	bAmphosUnderVolt := fAmphosVoltage < stAmphosSetpoints.nMinVoltage;
	CASE MODE OF
		E_Mode.OPCPA_Protection, E_Mode.MPC_Protection, E_Mode.MPC_Override:
			IF bAmphosUnderVolt
			THEN
				F_AmphosEnable := FALSE;
			ELSE
				F_AmphosEnable := TRUE;
			END_IF
		ELSE
			F_AmphosEnable := TRUE;
	END_CASE
END_IF
]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>

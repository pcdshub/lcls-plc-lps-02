<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="F_AmphosShutterEnable" Id="{a7fc5b7f-48ee-48e8-a6f9-0fc0af7200c2}" SpecialFunc="None">
    <Declaration><![CDATA[// Interlock logic for the Amphos shutter
FUNCTION F_AmphosShutterEnable : BOOL
VAR_INPUT
    //bAmphosOn : BOOL; // Whether the amphos is on
    fOpcpaVoltage : LREAL; // The voltage of the OPCPA
    fAmphosVoltage : LREAL; // The Amphos voltage
    AmphosStatus :BOOL; //Amphos Laser Shutter Status
    bLoopTempOverride01 : BOOL; // Whether the chiller loop error is overriden
    bLoopTempOverride02 : BOOL; // Whether the chiller loop error is overriden
    bLoopTempOverride03 : BOOL; // Whether the chiller loop error is overriden
    bLoopTempOverride04 : BOOL; // Whether the chiller loop error is overriden
    bLoopTempOverride05 : BOOL; // Whether the chiller loop error is overriden
    Mode : E_Mode; // Mode of operation
    ShutterStatus : BOOL; //Shutter Status
END_VAR

VAR_IN_OUT CONSTANT
    stErrors : ST_ErrorStates; // Currently detected errors
    stOpcpaSetpoints : ST_LaserSetpoints; // OPCPA setpoints
    stAmphosSetpoints : ST_LaserSetpoints; // The Amphos setpoints
END_VAR
VAR
	bChillerErrors : BOOL; // Local logical sum of chiller error states
	bTempSwitchErrors : BOOL; // Local logical sum of temperature switch errors
	bAmphosUnderVolt: BOOL; // Local var for checking Amphos under MinVoltage
	bOpcpaUnderVolt: BOOL; // Local var for checking OPCPA under MinVoltage
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[(*// The Amphos Shutter Enable function sends and Enable or Disable bit as an output to be used by the Amphos Shutter Command block
// AmphosShutterEnable := True := OPEN SHUTTER
// AmphosShutterEnable := FALSE := CLOSE SHUTTER
The below logic follows the logic table
Note : In master override modes, the Shutter state will hold the previous state value, unless manually forced
*)

bChillerErrors := (
				 (NOT bLoopTempOverride01 AND stErrors.bChillerLoop01) OR
    			 (NOT bLoopTempOverride02 AND stErrors.bChillerLoop02) OR
        		 (NOT bLoopTempOverride03 AND stErrors.bChillerLoop03) OR
       		     (NOT bLoopTempOverride04 AND stErrors.bChillerLoop04) OR
                 (NOT bLoopTempOverride05 AND stErrors.bChillerLoop05)
			     );
bTempSwitchErrors := (
					 NOT GVL_IO.bLoopTempSW01 OR
       				 NOT GVL_IO.bLoopTempSW02 OR
       				 NOT GVL_IO.bLoopTempSW03 OR
       				 NOT GVL_IO.bLoopTempSW04 OR
    			     NOT GVL_IO.bLoopTempSW05
					);
bAmphosUnderVolt := fAmphosVoltage < stAmphosSetpoints.nMinVoltage;
bOpcpaUnderVolt := fOpcpaVoltage < stOpcpaSetpoints.nMinVoltage;

IF (stErrors.bHardwareFailure // Close shutter if there is a hardware failure
    (*OR stErrors.bLeakOpticalTableAmphosOn OR stErrors.bLeakOpcpaCarbideOn OR stErrors.bLeakUnderTable*) // Close shutter if there is a leak on the optical table with the amphos on, a leak under the table, or a leak inside the OPCPA with Carbide on
	//Close shutter if the amphos is on and the temperature is too high in any loop. Ignore if operator override is enabled
	 OR (bChillerErrors OR bTempSwitchErrors)
	// Close shutter if in OPCPA beam error state and OPCPA voltage too low
	 OR fOpcpaVoltage < stOpcpaSetpoints.nMinVoltage AND stErrors.bOpcpaBeam 
	// Close the shutter if there is a Dump Chiller error
	 OR stErrors.bDumpChiller
	)
	// Check global IO for redundancy of Dump Chiller Errors
	OR (NOT GVL_IO.bDumpChillerFlow)
	OR (NOT GVL_IO.bBaseplateChillerFlow)
THEN
    F_AmphosShutterEnable := FALSE;
ELSE
	CASE MODE OF
		E_Mode.OPCPA_Protection:
		    IF (bAmphosUnderVolt OR bOpcpaUnderVolt)
			THEN
				F_AmphosShutterEnable := FALSE;
			ELSE
				F_AmphosShutterEnable := TRUE;
		    END_IF
		E_Mode.MPC_Protection, E_Mode.MPC_Override:
		    IF (bAmphosUnderVolt OR NOT AmphosStatus)
			THEN
				F_AmphosShutterEnable := FALSE;
			ELSE
				F_AmphosShutterEnable := TRUE;
			END_IF
		E_Mode.MASTER_Override, E_Mode.OPCPA_Override:
			IF NOT ShutterStatus
			THEN
				F_AmphosShutterEnable := TRUE;
			ELSE
				F_AmphosShutterEnable := FALSE;
			END_IF
		ELSE
			F_AmphosShutterEnable := TRUE;
	END_CASE
END_IF ]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>

<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="FB_AmphosShutterEnable" Id="{fe502755-6cd5-4b23-8e8b-90ce055b744e}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_AmphosShutterEnable
VAR_INPUT
    fOpcpaVoltage       : LREAL; // The voltage of the OPCPA
    fAmphosVoltage      : LREAL; // The Amphos voltage
    AmphosStatus        :BOOL; //Amphos Laser Shutter Status
    ShutterStatus       : BOOL; //Shutter Status
END_VAR

VAR_OUTPUT
END_VAR

VAR
    bAmphosUnderVolt    : BOOL; //Amphos Power meter under min setpoint voltage
    bOpcpaUnderVolt     : BOOL; //Opcpa Power Meter under min setpoint voltage
    bTempSwitchError    : BOOL; //Temp. Switch error, not bypassed
END_VAR

VAR_IN_OUT CONSTANT
    stErrors            : ST_ErrorStates; // Currently detected errors
    stOpcpaSetpoints    : ST_LaserSetpoints; // OPCPA setpoints
    stAmphosSetpoints   : ST_LaserSetpoints; // The Amphos setpoints
    Mode                : E_Mode; // Mode of operation
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[(*// The Amphos Shutter Enable function sends and Enable or Disable bit as an output to be used by the Amphos Shutter Command block
// AmphosShutterEnable := True := OPEN SHUTTER
// AmphosShutterEnable := FALSE := CLOSE SHUTTER
The below logic follows the logic table
Note : In master override modes, the Shutter state will hold the previous state value, unless manually forced
*)
bAmphosUnderVolt := fAmphosVoltage < stAmphosSetpoints.nMinVoltage;
bOpcpaUnderVolt := fOpcpaVoltage < stOpcpaSetpoints.nMinVoltage;
bTempSwitchError := (NOT GVL_IO.bLoopTempSW01
                     OR NOT GVL_IO.bLoopTempSW02
                     OR NOT GVL_IO.bLoopTempSW03
                     OR NOT GVL_IO.bLoopTempSW04
                     OR NOT GVL_IO.bLoopTempSW05);

IF
// Close shutter if there is a hardware failure
(stErrors.bHardwareFailure  OR stErrors.bDumpChiller OR stErrors.bBaseplateChiller)
THEN
    GVL_IO.bAmphosShutterCMD := FALSE;
    GVL_IO.bAmphosShutterEnable := FALSE;
ELSE
    CASE MODE OF
        E_Mode.MASTER_Override, E_Mode.Maintenance:
            GVL_IO.bAmphosShutterCMD := GVL_IO.bAmphosShutterEnable;
        E_Mode.Protection:
            // Disable shutter if any laser or temperature switch trips
            IF (bTempSwitchError
                OR bAmphosUnderVolt
                OR bOpcpaUnderVolt
                OR NOT AmphosStatus)
                THEN
                    GVL_IO.bAmphosShutterCMD := FALSE;
                    GVL_IO.bAmphosShutterEnable := FALSE;
            // Otherwise you're safe to enable
            ELSE
                    GVL_IO.bAmphosShutterCMD := TRUE;
                    GVL_IO.bAmphosShutterEnable := TRUE;
            END_IF
        // Invalid mode, do not get here
        ELSE
            Mode := E_Mode.Protection;
    END_CASE
END_IF
]]></ST>
    </Implementation>
    <LineIds Name="FB_AmphosShutterEnable">
      <LineId Id="3" Count="39" />
      <LineId Id="44" Count="2" />
      <LineId Id="2" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>